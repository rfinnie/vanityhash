.\" Automatically generated by Pandoc 2.5
.\"
.TH "VANITYHASH" "1" "" "" "vanityhash"
.hy
.SH NAME
.PP
vanityhash \- A hex hash fragment creation tool
.SH SYNOPSIS
.PP
vanityhash [\f[I]options\f[R]] hexfragment < inputfile
.PP
vanityhash \f[I]\-\-append\f[R] [\f[I]options\f[R]] hexfragment <
inputfile > outputfile
.SH DESCRIPTION
.PP
\f[C]vanityhash\f[R] is a tool that can discover data to be added to the
end of a file to produce a desired hex hash fragment.
It searches a message space and runs a hashing algorithm against the
original data plus the appended data to determine if the desired hash
fragment is present.
vanityhash can run multiple parallel workers to effectively make use of
multiple processors/cores/threads, and supports multiple hash digest
types (MD5, SHA1, SHA256, etc).
.PP
vanityhash can be used to append data to files that are capable of
ignoring garbage data at the end of the file (such as ISO images and
some types of graphic images), in order to produce a \[lq]vanity\[rq]
hash.
vanityhash is fast, as it only reads the base input data once, and then
reverts back to that base state over and over while it permeates the
search space, rather than hashing the entire source during each
permeation.
.PP
vanityhash operates on the concept of a \[lq]search space\[rq].
For example, given a 24\-bit search space, vanityhash will run from
0x00000000 to 0x00ffffff, append the 4\-byte packed version of each
number to the end of the input data, calculate the resulting hash, and
search the hash value for the desired hex fragment pattern.
A desired hex fragment can be larger than the search space (for example,
searching for \[lq]abcdef\[rq] in a 16\-bit search space), but the
chances of finding a match reduce drastically the larger the desired hex
fragment is.
.PP
In its default operation, vanityhash will search the entire specified
search space and output all matching results to STDOUT, one result per
line, in the form \[lq]extradata hash\[rq], where both
\[lq]extradata\[rq] and \[lq]hash\[rq] are in hex form.
When the \f[I]\-\-append\f[R] option is specified, this behavior
changes.
If a match is found, the original input data plus the extra data (in
byte form) are outputted, and searching ends after the first successful
match.
If no matches are found, the original data only is outputted.
.PP
A special \[lq]hex fragment\[rq] keyword of \[lq]benchmark\[rq] turns on
standardized benchmark test options, and runs for 60 seconds.
.SH OPTIONS
.TP
.B \-b \f[I]bits\f[R], \-\-bits=\f[I]bits\f[R]
Space to be searched, in bits.
Allowed values range from 1 to 64.
.PD 0
.P
.PD
Default is 32.
Search spaces larger than the host operating system\[cq]s native
(i.e.\ 64 on a 32\-bit operating system) will incur a performance
penalty.
.TP
.B \-t \f[I]bits\f[R], \-\-bits\-pack=\f[I]bits\f[R]
By default, the size used to contain the search space is computed
automatically.
For example, a 24\-bit search space requires a 32\-bit (4\-byte) pack.
If you would like to use a larger pack size, this can be specified.
For example, to search a 24\-bit space by appending 8 bytes, use
\[lq]\-\-bits=24 \-\-bits\-pack=64\[rq].
Must be 8, 16, 32, or 64, and must be equal to or larger than \-\-bits.
.TP
.B \-p \f[I]position\f[R], \-\-position=\f[I]position\f[R]
The position within the hex hash to look for the desired fragment, in
hex digits.
The beginning starts at 0.
Default is 0.
Negative numbers extend backward from the end of the hash.
.TP
.B \-y, \-\-any\-position
When enabled, this option will override \-\-position and will return
hashes that contain the desired fragment in any position within the
hash.
.TP
.B \-n, \-\-byte\-order=\f[I]order\f[R]
Used to set the byte order (endianness) of the space being searched.
Values are \[lq]native\[rq], \[lq]little\[rq] or \[lq]big\[rq].
Default is \[lq]native\[rq].
Use this when spreading workers over multiple machines whose
architectures differ in endianness (but this incurs a performance
penalty).
.TP
.B \-s \f[I]seconds\f[R], \-\-progress=\f[I]seconds\f[R]
The number of seconds between printing of progress lines, default 5
seconds.
A decimal value may be specified.
A value of 0 disabled printing progress lines.
.TP
.B \-w \f[I]workers\f[R], \-\-workers=\f[I]workers\f[R]
The number of workers to be spawned.
Default is the number of logical processors if this can be determined,
otherwise 1.
Recommended value is the number of logical processors on the running
system.
.RS
.PP
This option can also be used to specify a \[lq]worker space\[rq], and
then specify which workers within that space to actually launch.
This way the work can be split up among multiple vanityhash invocations
on different systems.
For example:
.IP
.nf
\f[C]
host1$ vanityhash \-w 8:1,3,5,7 < inputfile
host2$ vanityhash \-w 8:2,4,6,8 < inputfile
\f[R]
.fi
.PP
This sets a worker space of 8 workers, but only launches workers 1, 3, 5
and 7 on host1, and 2, 4, 6 and 8 on host2.
To do this, the input data must be on all hosts, and ideally the
vanityhash version should be the same as well.
.RE
.TP
.B \-\-deadline=\f[I]seconds\f[R]
The maximum number of seconds to run workers before finishing.
.TP
.B \-\-read\-file=\f[I]filename\f[R]
File to read data from.
Defaults to \[lq]\-\[rq] (STDIN).
.TP
.B \-\-write\-file=\f[I]filename\f[R]
File to write data to.
Must be different from from the read file.
Defaults to \[lq]\-\[rq] (STDOUT).
.TP
.B \-\-list\-digests
Print a list of available digests and exit.
.TP
.B \-d \f[I]digesttype\f[R], \-\-digest=\f[I]digesttype\f[R]
The hashing digest type to use.
Default is \[lq]md5\[rq].
Digests available depend on the OpenSSL compiled against Python.
.TP
.B \-a, \-\-append
When enabled, the original data is outputted back to STDOUT.
Then, when/if the first matching hash is found, the data fragment used
to produce the matching hash is outputted to STDOUT.
STDOUT can then be redirected to another file to produce the modified
file.
.TP
.B \-e, \-\-append\-empty
When using \-\-append, if a match is not found, add empty (zeroed) pack
bytes anyway.
This way, the STDOUT data will always be the same byte length no matter
if a match is found or not.
.TP
.B \-q, \-\-quiet
Normally vanityhash sends a fair amount of status information to STDERR
during operation.
When enabled, all non\-error status information is instead suppressed.
.TP
.B \-\-debug
Print extra debugging information.
.TP
.B \-h, \-\-help
Print a synposis and exit.
.SH BUGS / LIMITATIONS
.PP
vanityhash should work on any POSIX operating system, and has been
tested on Linux and Mac OS X.
It currently does not work on Windows, due to Python multiprocessing
limitations.
.SH CREDITS
.PP
\f[C]vanityhash\f[R] was written by Ryan Finnie <ryan@finnie.org>.
vanityhash was inspired by Seth David Schoen\[cq]s 2003 program,
hash_search.
.SH AUTHORS
Ryan Finnie.
